AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation template for  VPC with two private and two public subnet'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '172.30.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: 'Name'
          Value: 'vpc'
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.128.0/18'
      VpcId:
        Ref: 'VPC'
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-a
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.192.0/18'
      VpcId:
        Ref: 'VPC'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-b
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.0.0/18'
      VpcId:
        Ref: 'VPC'
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-a
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '172.30.64.0/18'
      VpcId:
        Ref: 'VPC'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-b
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'vpc-igw'
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  NatgatewayEIPA:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatgatewayA:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      AllocationId: !GetAtt 'NatgatewayEIPA.AllocationId'
  NatgatewayEIPB:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatgatewayB:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      AllocationId: !GetAtt 'NatgatewayEIPB.AllocationId'
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: 'Name'
          Value: 'vpc-priv-route-a'
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: 
        Ref: PrivateRouteTableA
      NatGatewayId: 
        Ref: NatgatewayA
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: 'Name'
          Value: 'vpc-priv-route-b'
  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: 
        Ref: PrivateRouteTableB
      NatGatewayId: 
        Ref: NatgatewayB
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTableA
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTableB
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: 'Name'
          Value: 'vpc-public-route-a'
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: 
        Ref: PublicRouteTableA
      GatewayId: 
        Ref: InternetGateway
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: 'Name'
          Value: 'vpc-public-route-b'
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: 
        Ref: PublicRouteTableB
      GatewayId: 
        Ref: InternetGateway
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTableA
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTableB
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'vpc-public-acl'
  InboundVpcPublicAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535
  OutboundVpcPublicAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  PublicSubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      NetworkAclId:
        Ref: PublicNetworkAcl
  PublicSubnetNetworkAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      NetworkAclId:
        Ref: PublicNetworkAcl
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'vpc-priv-acl'
  InboundVpcPrivateAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535
  OutboundVpcPrivateAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  PrivateSubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      NetworkAclId:
        Ref: PublicNetworkAcl
  PrivateSubnetNetworkAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      NetworkAclId:
        Ref: PublicNetworkAcl
  InsideVpcSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Within VPC enable all traffic
      SecurityGroupEgress:
        - CidrIp: '172.30.0.0/16'
          FromPort: -1
          IpProtocol: '-1'
          ToPort: -1
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: '172.30.0.0/16'
      Tags:
        - Key: 'Name'
          Value: 'InsideVpcSG'
      VpcId: 
        Ref: VPC
Outputs:
  VPCId:
    Description: VPC ID for 
    Value:
      Ref: VPC
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-VPCId"
  PrivateSubnetAId:
    Description: private subnet id for vpc
    Value:
      Ref: PrivateSubnetA
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PrivateSubnetAId'
  PrivateSubnetBId:
    Description: private subnet id for vpc
    Value:
      Ref: PrivateSubnetB
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PrivateSubnetBId'
  PublicSubnetAId:
    Description: public subnet id for vpc
    Value:
      Ref: PublicSubnetA
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PublicSubnetAId'
  PublicSubnetBId:
    Description: public subnet id for vpc
    Value:
      Ref: PublicSubnetB
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PublicSubnetBId'
  InsideVpcSGId:
    Description: SG for inside VPC communication
    Value:
      Ref: InsideVpcSG
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-InsideVpcSGId'



  

  

      

